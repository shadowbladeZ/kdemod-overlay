From 8861cfc7b4a8a3278773db766b836bbdce33e718 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Wed, 17 Jun 2009 15:26:14 +0200
Subject: [PATCH] Removed event-id

---
--- a/plasma/applets/systemtray/core/notification.cpp
+++ b/plasma/applets/systemtray/core/notification.cpp
@@ -41,7 +41,6 @@ public:
 
     QString applicationName;
     QIcon applicationIcon;
-    QString eventId;
     QString message;
     QString summary;
     int timeout;
@@ -90,18 +89,6 @@ void Notification::setApplicationIcon(const QIcon &applicationIcon)
 }
 
 
-QString Notification::eventId() const
-{
-    return d->eventId;
-}
-
-
-void Notification::setEventId(const QString &eventId)
-{
-    d->eventId = eventId;
-}
-
-
 QString Notification::message() const
 {
     return d->message;
--- a/plasma/applets/systemtray/core/notification.h
+++ b/plasma/applets/systemtray/core/notification.h
@@ -42,7 +42,6 @@ public:
 
     QString applicationName() const;
     QIcon applicationIcon() const;
-    QString eventId() const;
     QString message() const;
     QString summary() const;
     int timeout() const;
@@ -66,7 +65,6 @@ signals:
 protected:
     void setApplicationName(const QString &applicationName);
     void setApplicationIcon(const QIcon &applicationIcon);
-    void setEventId(const QString &eventId);
     void setMessage(const QString &message);
     void setSummary(const QString &summary);
     void setTimeout(int timeout);
--- a/plasma/applets/systemtray/protocols/notifications/dbusnotificationprotocol.cpp
+++ b/plasma/applets/systemtray/protocols/notifications/dbusnotificationprotocol.cpp
@@ -89,7 +89,6 @@ void DBusNotificationProtocol::dataUpdated(const QString &source, const Plasma::
     DBusNotification* notification = m_notifications[source];
     notification->setApplicationName(data.value("appName").toString());
     notification->setApplicationIcon(KIcon(data.value("appIcon").toString()));
-    notification->setEventId(data.value("eventId").toString());
     notification->setSummary(data.value("summary").toString());
     notification->setMessage(data.value("body").toString());
     notification->setTimeout(data.value("expireTimeout").toInt());
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -50,7 +50,7 @@ void NotificationsEngine::init()
 {
 }
 
-uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id, const QString &event_id,
+uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
                                  const QString &app_icon, const QString &summary, const QString &body,
                                  const QStringList &actions, const QVariantMap &hints, int timeout)
 {
@@ -77,7 +77,6 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id, cons
     notificationData.insert("id", QString::number(id));
     notificationData.insert("appName", appname_str);
     notificationData.insert("appIcon", app_icon);
-    notificationData.insert("eventId", event_id);
     notificationData.insert("summary", summary);
     notificationData.insert("body", body);
     notificationData.insert("actions", actions);
--- a/plasma/dataengines/notifications/notificationsengine.h
+++ b/plasma/dataengines/notifications/notificationsengine.h
@@ -44,7 +44,7 @@ public:
      *  This function implements part of Notifications DBus interface.
      *  Once called, will add notification source to the engine
      */
-    uint Notify(const QString &app_name, uint replaces_id, const QString &event_id, const QString &app_icon, const QString &summary, const QString &body, const QStringList &actions, const QVariantMap &hints, int timeout);
+    uint Notify(const QString &app_name, uint replaces_id, const QString &app_icon, const QString &summary, const QString &body, const QStringList &actions, const QVariantMap &hints, int timeout);
 
     void CloseNotification( uint id );
 
--- a/plasma/dataengines/notifications/org.kde.VisualNotifications.xml
+++ b/plasma/dataengines/notifications/org.kde.VisualNotifications.xml
@@ -10,11 +10,10 @@
       <arg name="action_key" type="s" direction="out"/>
     </signal>
     <method name="Notify">
-      <annotation name="com.trolltech.QtDBus.QtTypeName.In7" value="QVariantMap"/>
+      <annotation name="com.trolltech.QtDBus.QtTypeName.In6" value="QVariantMap"/>
       <arg type="u" direction="out"/>
       <arg name="app_name" type="s" direction="in"/>
       <arg name="replaces_id" type="u" direction="in"/>
-      <arg name="event_id" type="s" direction="in"/>
       <arg name="app_icon" type="s" direction="in"/>
       <arg name="summary" type="s" direction="in"/>
       <arg name="body" type="s" direction="in"/>
From 86dd34fb4efba8163272c171912484ea077b0ed0 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Thu, 18 Jun 2009 17:45:23 +0200
Subject: [PATCH] Switch to org.freedesktop.Notifications

---
--- a/plasma/dataengines/notifications/CMakeLists.txt
+++ b/plasma/dataengines/notifications/CMakeLists.txt
@@ -4,7 +4,7 @@ set(notifications_engine_SRCS
     notificationaction.cpp
 )
 
-qt4_add_dbus_adaptor( notifications_engine_SRCS org.kde.VisualNotifications.xml notificationsengine.h  NotificationsEngine )
+qt4_add_dbus_adaptor( notifications_engine_SRCS org.freedesktop.Notifications.xml notificationsengine.h  NotificationsEngine )
 
 kde4_add_plugin(plasma_engine_notifications ${notifications_engine_SRCS})
 
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -19,7 +19,7 @@
 
 #include "notificationsengine.h"
 #include "notificationservice.h"
-#include "visualnotificationsadaptor.h"
+#include "notificationsadaptor.h"
 
 #include <Plasma/DataContainer>
 #include <Plasma/Service>
@@ -29,21 +29,21 @@
 NotificationsEngine::NotificationsEngine( QObject* parent, const QVariantList& args )
     : Plasma::DataEngine( parent, args ), m_nextId( 1 )
 {
-    VisualNotificationsAdaptor* adaptor = new VisualNotificationsAdaptor(this);
+    NotificationsAdaptor* adaptor = new NotificationsAdaptor(this);
     connect(this, SIGNAL(NotificationClosed(uint, uint)),
             adaptor, SIGNAL(NotificationClosed(uint,uint)));
     connect(this, SIGNAL(ActionInvoked(uint, const QString&)),
             adaptor, SIGNAL(ActionInvoked(uint, const QString&)));
 
     QDBusConnection dbus = QDBusConnection::sessionBus();
-    dbus.registerService( "org.kde.VisualNotifications" );
-    dbus.registerObject( "/VisualNotifications", this );
+    dbus.registerService( "org.freedesktop.Notifications" );
+    dbus.registerObject( "/org/freedesktop/Notifications", this );
 }
 
 NotificationsEngine::~NotificationsEngine()
 {
     QDBusConnection dbus = QDBusConnection::sessionBus();
-    dbus.unregisterService( "org.kde.VisualNotifications" );
+    dbus.unregisterService( "org.freedesktop.Notifications" );
 }
 
 void NotificationsEngine::init()
@@ -123,6 +123,26 @@ Plasma::Service* NotificationsEngine::serviceForSource(const QString& source)
     return new NotificationService(this, source);
 }
 
+QStringList NotificationsEngine::GetCapabilities()
+{
+    return QStringList()
+        << "body"
+        << "body-hyperlinks"
+        << "body-markup"
+        << "icon-static"
+        << "actions"
+        ;
+}
+
+// FIXME: Signature is ugly
+QString NotificationsEngine::GetServerInformation(QString& vendor, QString& version, QString& specVersion)
+{
+    vendor = "KDE";
+    version = "1.0"; // FIXME
+    specVersion = "0.10";
+    return "Plasma";
+}
+
 K_EXPORT_PLASMA_DATAENGINE(notifications, NotificationsEngine)
 
 #include "notificationsengine.moc"
--- a/plasma/dataengines/notifications/notificationsengine.h
+++ b/plasma/dataengines/notifications/notificationsengine.h
@@ -50,6 +50,10 @@ public:
 
     Plasma::Service* serviceForSource(const QString& source);
 
+    QStringList GetCapabilities();
+
+    QString GetServerInformation(QString& vendor, QString& version, QString& specVersion);
+
 signals:
     void NotificationClosed( uint id, uint reason );
     void ActionInvoked( uint id, const QString& actionKey );
--- /dev/null
+++ b/plasma/dataengines/notifications/org.freedesktop.Notifications.xml
@@ -0,0 +1,37 @@
+<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
+<node>
+  <interface name="org.freedesktop.Notifications">
+    <signal name="NotificationClosed">
+      <arg name="id" type="u" direction="out"/>
+      <arg name="reason" type="u" direction="out"/>
+    </signal>
+    <signal name="ActionInvoked">
+      <arg name="id" type="u" direction="out"/>
+      <arg name="action_key" type="s" direction="out"/>
+    </signal>
+    <method name="Notify">
+      <annotation name="com.trolltech.QtDBus.QtTypeName.In6" value="QVariantMap"/>
+      <arg type="u" direction="out"/>
+      <arg name="app_name" type="s" direction="in"/>
+      <arg name="replaces_id" type="u" direction="in"/>
+      <arg name="app_icon" type="s" direction="in"/>
+      <arg name="summary" type="s" direction="in"/>
+      <arg name="body" type="s" direction="in"/>
+      <arg name="actions" type="as" direction="in"/>
+      <arg name="hints" type="a{sv}" direction="in"/>
+      <arg name="timeout" type="i" direction="in"/>
+    </method>
+    <method name="CloseNotification">
+      <arg name="id" type="u" direction="in"/>
+    </method>
+    <method name="GetCapabilities">
+      <arg type="as" name="caps" direction="out"/>
+    </method>
+    <method name="GetServerInformation">
+      <arg type="s" name="name" direction="out"/>
+      <arg type="s" name="vendor" direction="out"/>
+      <arg type="s" name="version" direction="out"/>
+      <arg type="s" name="spec_version" direction="out"/>
+    </method>
+  </interface>
+</node>
--- a/plasma/dataengines/notifications/org.kde.VisualNotifications.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
-<node>
-  <interface name="org.kde.VisualNotifications">
-    <signal name="NotificationClosed">
-      <arg name="id" type="u" direction="out"/>
-      <arg name="reason" type="u" direction="out"/>
-    </signal>
-    <signal name="ActionInvoked">
-      <arg name="id" type="u" direction="out"/>
-      <arg name="action_key" type="s" direction="out"/>
-    </signal>
-    <method name="Notify">
-      <annotation name="com.trolltech.QtDBus.QtTypeName.In6" value="QVariantMap"/>
-      <arg type="u" direction="out"/>
-      <arg name="app_name" type="s" direction="in"/>
-      <arg name="replaces_id" type="u" direction="in"/>
-      <arg name="app_icon" type="s" direction="in"/>
-      <arg name="summary" type="s" direction="in"/>
-      <arg name="body" type="s" direction="in"/>
-      <arg name="actions" type="as" direction="in"/>
-      <arg name="hints" type="a{sv}" direction="in"/>
-      <arg name="timeout" type="i" direction="in"/>
-    </method>
-    <method name="CloseNotification">
-      <arg name="id" type="u" direction="in"/>
-    </method>
-  </interface>
-</node>
From 6e01fe489d0ad14acbdd508abfaafecfa0e6ef1d Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Mon, 22 Jun 2009 14:53:36 +0200
Subject: [PATCH] Handle case where timeout is -1

---
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -62,6 +62,18 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
         appname_str = i18n("Unknown Application");
     }
 
+    if (timeout == -1) {
+        const int AVERAGE_WORD_LENGTH = 6;
+        const int WORD_PER_MINUTE = 250;
+        int count = summary.length() + body.length();
+        timeout = 60000 * count / AVERAGE_WORD_LENGTH / WORD_PER_MINUTE;
+
+        // Add two seconds for the user to notice the notification, and ensure
+        // it last at least five seconds, otherwise all the user see is a
+        // flash
+        timeout = 2000 + qMin(timeout, 3000);
+    }
+
     const QString source = QString("notification %1").arg(id);
     if (replaces_id) {
         Plasma::DataContainer *container = containerForSource(source);
From 3ac53643297bae7fc80d741037cf7091435a7b37 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Mon, 22 Jun 2009 18:39:46 +0200
Subject: [PATCH] Add support for decoding fdo spec image hint

---
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -50,6 +50,60 @@ void NotificationsEngine::init()
 {
 }
 
+inline void copyLineRGB32(int* dst, const char* src, int width)
+{
+    const char* end = src + width * 3;
+    for (; src != end; ++dst, src+=3) {
+        *dst = qRgb(src[0], src[1], src[2]);
+    }
+}
+
+inline void copyLineARGB32(int* dst, const char* src, int width)
+{
+    const char* end = src + width * 4;
+    for (; src != end; ++dst, src+=4) {
+        *dst = qRgba(src[0], src[1], src[2], src[3]);
+    }
+}
+
+static QImage decodeNotificationSpecImageHint(const QDBusArgument& arg)
+{
+    int width, height, rowStride, hasAlpha, bitsPerSample, channels;
+    QByteArray pixels;
+    char* ptr;
+    char* end;
+
+    arg.beginStructure();
+    arg >> width >> height >> rowStride >> hasAlpha >> bitsPerSample >> channels >> pixels;
+    arg.endStructure();
+    //kDebug() << width << height << rowStride << hasAlpha << bitsPerSample << channels;
+
+    QImage::Format format = QImage::Format_Invalid;
+    void (*fcn)(int*, const char*, int) = 0;
+    if (bitsPerSample == 8) {
+        if (channels == 4) {
+            format = QImage::Format_ARGB32;
+            fcn = copyLineARGB32;
+        } else if (channels == 3) {
+            format = QImage::Format_RGB32;
+            fcn = copyLineRGB32;
+        }
+    }
+    if (format == QImage::Format_Invalid) {
+        kWarning() << "Unsupported image format (hasAlpha:" << hasAlpha << "bitsPerSample:" << bitsPerSample << "channels:" << channels << ")";
+        return QImage();
+    }
+
+    QImage image(width, height, format);
+    ptr = pixels.data();
+    end = ptr + pixels.length();
+    for (int y=0; y<height && ptr < end; ++y, ptr += rowStride) {
+        fcn((int*)image.scanLine(y), ptr, width);
+    }
+
+    return image;
+}
+
 uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
                                  const QString &app_icon, const QString &summary, const QString &body,
                                  const QStringList &actions, const QVariantMap &hints, int timeout)
@@ -96,7 +150,8 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
 
     QImage image;
     if (hints.contains("image_data")) {
-        image.loadFromData(hints["image_data"].toByteArray());
+        QDBusArgument arg = hints["image_data"].value<QDBusArgument>();
+        image = decodeNotificationSpecImageHint(arg);
     }
     notificationData.insert("image", image);
 
From 526132cec1af998256e8f76e2057268d3a1cda18 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Tue, 23 Jun 2009 11:31:12 +0200
Subject: [PATCH] Check values coming from DBus.

---
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -50,7 +50,7 @@ void NotificationsEngine::init()
 {
 }
 
-inline void copyLineRGB32(int* dst, const char* src, int width)
+inline void copyLineRGB32(QRgb* dst, const char* src, int width)
 {
     const char* end = src + width * 3;
     for (; src != end; ++dst, src+=3) {
@@ -58,7 +58,7 @@ inline void copyLineRGB32(int* dst, const char* src, int width)
     }
 }
 
-inline void copyLineARGB32(int* dst, const char* src, int width)
+inline void copyLineARGB32(QRgb* dst, const char* src, int width)
 {
     const char* end = src + width * 4;
     for (; src != end; ++dst, src+=4) {
@@ -78,8 +78,22 @@ static QImage decodeNotificationSpecImageHint(const QDBusArgument& arg)
     arg.endStructure();
     //kDebug() << width << height << rowStride << hasAlpha << bitsPerSample << channels;
 
+    #define SANITY_CHECK(condition) \
+    if (!(condition)) { \
+        kWarning() << "Sanity check failed on" << #condition; \
+        return QImage(); \
+    }
+
+    SANITY_CHECK(width > 0);
+    SANITY_CHECK(width < 2048);
+    SANITY_CHECK(height > 0);
+    SANITY_CHECK(height < 2048);
+    SANITY_CHECK(rowStride > 0);
+
+    #undef SANITY_CHECK
+
     QImage::Format format = QImage::Format_Invalid;
-    void (*fcn)(int*, const char*, int) = 0;
+    void (*fcn)(QRgb*, const char*, int) = 0;
     if (bitsPerSample == 8) {
         if (channels == 4) {
             format = QImage::Format_ARGB32;
@@ -97,8 +111,12 @@ static QImage decodeNotificationSpecImageHint(const QDBusArgument& arg)
     QImage image(width, height, format);
     ptr = pixels.data();
     end = ptr + pixels.length();
-    for (int y=0; y<height && ptr < end; ++y, ptr += rowStride) {
-        fcn((int*)image.scanLine(y), ptr, width);
+    for (int y=0; y<height; ++y, ptr += rowStride) {
+        if (ptr + channels * width >= end) {
+            kWarning() << "Image data is incomplete. y:" << y << "height:" << height;
+            break;
+        }
+        fcn((QRgb*)image.scanLine(y), ptr, width);
     }
 
     return image;
From ef109d1ee33e1b927e20cf07f8c42e7d71912a0d Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Tue, 23 Jun 2009 14:32:00 +0200
Subject: [PATCH] Support for icon_data and image_path hints

image_path still need to look up image in themes
---
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -170,6 +170,14 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
     if (hints.contains("image_data")) {
         QDBusArgument arg = hints["image_data"].value<QDBusArgument>();
         image = decodeNotificationSpecImageHint(arg);
+    } else if (hints.contains("image_path")) {
+        image.load(hints["image_path"].toString());
+    } else if (hints.contains("icon_data")) {
+        // This hint was in use in version 0.9 of the spec but has been
+        // replaced by "image_data" in version 0.10. We need to support it for
+        // users of the 0.9 version of the spec.
+        QDBusArgument arg = hints["icon_data"].value<QDBusArgument>();
+        image = decodeNotificationSpecImageHint(arg);
     }
     notificationData.insert("image", image);
 
From 0917a6c2101ea3d53fc7bcc28dfe4a4e0069f571 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Aur=C3=A9lien=20G=C3=A2teau?= <agateau@kde.org>
Date: Tue, 23 Jun 2009 14:59:49 +0200
Subject: [PATCH] Support for passing icon names in the "image_path" hint.

---
--- a/plasma/dataengines/notifications/notificationsengine.cpp
+++ b/plasma/dataengines/notifications/notificationsengine.cpp
@@ -26,6 +26,8 @@
 
 #include <QImage>
 
+#include <kiconloader.h>
+
 NotificationsEngine::NotificationsEngine( QObject* parent, const QVariantList& args )
     : Plasma::DataEngine( parent, args ), m_nextId( 1 )
 {
@@ -122,6 +124,17 @@ static QImage decodeNotificationSpecImageHint(const QDBusArgument& arg)
     return image;
 }
 
+static QString findImageForSpecImagePath(const QString &_path)
+{
+    QString path = _path;
+    if (path.startsWith("file:")) {
+        KUrl url(path);
+        path = url.toLocalFile();
+    }
+    return KIconLoader::global()->iconPath(path, -KIconLoader::SizeHuge,
+                                           true /* canReturnNull */);
+}
+
 uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
                                  const QString &app_icon, const QString &summary, const QString &body,
                                  const QStringList &actions, const QVariantMap &hints, int timeout)
@@ -171,7 +184,10 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,
         QDBusArgument arg = hints["image_data"].value<QDBusArgument>();
         image = decodeNotificationSpecImageHint(arg);
     } else if (hints.contains("image_path")) {
-        image.load(hints["image_path"].toString());
+        QString path = findImageForSpecImagePath(hints["image_path"].toString());
+        if (!path.isEmpty()) {
+            image.load(path);
+        }
     } else if (hints.contains("icon_data")) {
         // This hint was in use in version 0.9 of the spec but has been
         // replaced by "image_data" in version 0.10. We need to support it for
